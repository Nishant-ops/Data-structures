nclude<iostream>
using namespace std;
#define ll long long

template<typename T>
class Node {
public:
	string key;
	T value;//Value will be generic

	Node<T>* next;

	Node(string key,T value)
	{
		this->key = key;
		this->value = value;
		this->next = nullptr;
	}
};
template<typename T>
class HashTable {
public:
	int cs;
	int ts;
	Node<T>** arr;
	HashTable(int ts = 2)
	{
		this->cs = 0;
		this->ts = ts;
		arr = new Node<T>*[this->ts];

		for (int i = 0; i < ts; i++)
			arr[i] = nullptr;
	}

	int HashFunc(string Key)
	{
		//this returns bucket index

		ll sum = 0;
		ll factor = 1;

		for (int i = 0; i < Key.length(); i++)
		{
			sum = ((sum % this->ts) + ((int)Key[i] * factor) % this->ts) % this->ts;

			sum = (sum % this->ts);

			factor = ((factor % this->ts) * (37 % this->ts)) % this->ts;
		}

		return ((int)sum%this->ts);
	}

	void ReHash()
	{
		int old_size = this->ts;
		this->ts = 2 * old_size;
		Node<T>** old_table = this->arr;
		this->arr = new Node<T>*[this->ts];

		for (int i = 0; i < this->ts; i++)
			this->arr[i] = nullptr;

		for (int i = 0; i < old_size; i++)
		{
			Node<T>* temp = old_table[i];
			while (temp != nullptr)
			{
				insert(temp->key, temp->value);
				temp = temp->next;
			}
		}
	}
	void insert(string Key, T Value)
	{
		T result = search(Key);
		int bi = HashFunc(Key);
		if (result != NULL)
		{
			Node<T>* temp = this->arr[bi];

			while (temp != nullptr)
			{
				if(temp->key==Key)
				temp->value = Value;

				temp = temp->next;

			}
			return;
		}
		Node<T>* new_node = new Node<T>(Key, Value);
		if (this->arr[bi] == nullptr)
		{
			this->arr[bi] = new_node;
		}
		else {
			new_node->next = arr[bi];
			this->arr[bi] = new_node;
		}

		this->cs++;

		double Load_Factor = ((double)this->cs / this->ts);

		if (Load_Factor > 0.5)
		{
			ReHash();
		}
	}

	T search(string key)
	{
		int idx = HashFunc(key);
		Node<T>* temp = this->arr[idx];
		while (temp != nullptr)
		{
			if (temp->key == key)
				return (temp->value);
		}

		return NULL;
	}

	void display()
	{
		for (int i = 0; i < this->ts; i++)
		{
			Node<T>* temp = arr[i];
			if (temp == nullptr)
			{
				std::cout << "EMPTY";
			}
			while (temp != nullptr)
			{
				std::cout << "(" << temp->key << " " << temp->value << ") --> ";
				temp = temp->next;
			}
			std::cout << "\n";
		}
	}
};

int main()
{
	int n;
	std::cin >> n;

	HashTable<int> *hash = new HashTable<int>();

	while (n--)
	{
		string s;
		std::cin >> s;
		int val;
		std::cin >> val;
		
		hash->insert(s, val);

		hash->display();

		std::cout << "*******************\n";

	}
}
